// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  adm          Boolean       @default(false)
  email        String        @unique
  name         String
  password     String
  forms        Form[]
  user_answers User_Answer[]

  @@map("users")
}

model Form {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  title            String
  desc             String?
  createdBy        Int
  date             DateTime?
  hash             String?       @unique
  answers_length   Int?          @default(0)
  questions_length Int?          @default(0)
  questions        Question[]
  users_answers    User_Answer[]
  value            Float?        @default(0)

  author User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("forms")
}

model Question {
  id      Int      @id @default(autoincrement())
  formId  Int
  type    String
  title   String
  inputs  String[]
  value   Float
  answers Answer[]

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model User_Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  createdBy Int
  formId    Int
  value     Int?
  answers   Answer[]

  author User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("users_answers")
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user_answerId Int
  questionId    Int
  content       String
  isCorrect     Boolean? @default(false)

  answerId User_Answer @relation(fields: [user_answerId], references: [id], onDelete: Cascade)
  question Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}
